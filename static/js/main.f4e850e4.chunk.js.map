{"version":3,"sources":["Assets/logo.svg","Constants.js","Boop/Boop.js","RoleDescription.js","Assets/Map.js","ProgressScreen.js","ScoreScreen.js","Header.js","Game/Game.js","serviceWorker.js","index.js"],"names":["module","exports","booster","navigator","wrangler","lifeSupport","Boop","onClick","props","onBoop","type","className","name","React","Component","RoleDescription","roleId","children","id","content","Map","currentStage","data-current-stage","viewBox","xmlns","d","stroke","strokeWidth","strokeDasharray","fill","data-stage","cx","cy","r","ProcessScreen","ScoreScreen","boosterScore","habitatorScore","navigatorScore","wranglerScore","secondsForRound","onNextRoundClick","cash","useState","showProgress","setShowProgress","minutes","toFixed","seconds","length","Header","src","LogoSvg","alt","Game","defaultRoleShape","boops","defaultState","room","state","resetGame","send","command","nextRound","value","this","setState","Colyseus","joinOrCreate","then","zones","onChange","update","sessionId","clientId","roleName","changes","stateChanges","forEach","change","field","totalBoopsRequired","secondsForLastRound","multiplier","yourRole","totalBoops","getRole","stage","betweenRounds","yourScore","calcCash","updateBoops","renderScreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"8HAAAA,EAAOC,QAAU,IAA0B,kC,uOCG9BC,G,MAAU,WACVC,EAAY,YACZC,EAAW,WACXC,EAAc,cCJNC,E,iLACT,IAAD,OACP,OACE,2BAAG,4BAAQC,QAAS,kBAAM,EAAKC,MAAMC,OAAO,IAAIC,KAAK,SAASC,UAAU,OAAOC,KAAK,SAAjF,c,GAHyBC,IAAMC,WCEzB,SAASC,EAAT,GAAgD,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,SA6ChD,OACE,0BAAMC,GAAG,mBA5CX,WACE,OAAQF,GACN,KAAKd,EACH,OACE,oCACE,2CAAgB,4CAChB,iGACA,4CAAiB,6CAAjB,kDACA,0CAAe,gDAAf,iBAA0D,4CAA1D,mBAGN,KAAKE,EACH,OACE,oCACE,2CAAgB,6CAChB,4FACA,4CAAiB,2CAAjB,4CACA,0CAAe,iDAAf,iBAA2D,6CAA3D,mBAGN,KAAKD,EACH,OACE,oCACE,2CAAgB,8CAChB,6FACA,4CAAiB,6CAAjB,iCACA,0CAAe,gDAAf,iBAA0D,2CAA1D,mBAGN,KAAKE,EACH,OACE,oCACE,2CAAgB,8CAChB,+GACA,4CAAiB,4CAAjB,kDACA,0CAAe,+CAAf,iBAAyD,6CAAzD,qCAGN,QACE,OAAO,MAMRc,GACAF,G,YClDQ,SAASG,EAAT,GAAgC,IAAjBC,EAAgB,EAAhBA,aAC5B,OACE,yBAAKC,qBAAoBD,EAAcE,QAAQ,kBAAkBC,MAAM,8BACrE,0BAAMC,EAAE,+GAA+GC,OAAO,UAAUC,YAAY,IAAIC,gBAAgB,IAAIC,KAAK,SACjL,4BAAQC,aAAW,IAAIC,GAAG,IAAIC,GAAG,MAAMC,EAAE,MACzC,4BAAQH,aAAW,IAAIC,GAAG,MAAMC,GAAG,KAAKC,EAAE,MAC1C,4BAAQH,aAAW,IAAIC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAC3C,4BAAQH,aAAW,IAAIC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAC3C,4BAAQH,aAAW,IAAIC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAC3C,4BAAQH,aAAW,IAAIC,GAAG,MAAMC,GAAG,KAAKC,EAAE,MAC1C,4BAAQH,aAAW,IAAIC,GAAG,MAAMC,GAAG,IAAIC,EAAE,MACzC,4BAAQH,aAAW,IAAIC,GAAG,MAAMC,GAAG,KAAKC,EAAE,MAC1C,4BAAQH,aAAW,IAAIC,GAAG,MAAMC,GAAG,KAAKC,EAAE,MAC1C,4BAAQH,aAAW,IAAIC,GAAG,MAAMC,GAAG,MAAMC,EAAE,MAC3C,4BAAQH,aAAW,KAAKC,GAAG,MAAMC,GAAG,MAAMC,EAAE,OCZnC,SAASC,EAAT,GAAoD,IAA3Bb,EAA0B,EAA1BA,aAAcJ,EAAY,EAAZA,SACpD,OACE,0BAAMC,GAAG,mBACP,kBAACE,EAAD,CAAKC,aAAcA,IAClBJ,GCLQ,SAASkB,EAAT,GAA8I,IAAvHC,EAAsH,EAAtHA,aAAcC,EAAwG,EAAxGA,eAAgBC,EAAwF,EAAxFA,eAAgBC,EAAwE,EAAxEA,cAAeC,EAAyD,EAAzDA,gBAAiBC,EAAwC,EAAxCA,iBAAkBC,EAAsB,EAAtBA,KAAMrB,EAAgB,EAAhBA,aAAgB,EAClHsB,oBAAS,GADyG,mBACnJC,EADmJ,KACrIC,EADqI,KAGpJC,GAAWN,EAAkB,IAAIO,QAAQ,GAC3CC,GAAWR,EAAkB,IAAIO,QAAQ,GAG7C,OAFuB,IAAnBC,EAAQC,SAAcD,EAAU,IAAMA,GAEtCJ,EAEA,kBAACV,EAAD,CAAeb,aAAcA,GAC3B,2BAAG,4BAAQd,QAAS,kBAAMsC,GAAgB,IAAQnC,KAAK,SAASC,UAAU,OAAOC,KAAK,SAAnF,iBAMP,0BAAMM,GAAG,gBACP,wBAAIP,UAAU,cACZ,oCACA,4BAAKmC,EAAL,IAAeE,IAEjB,wBAAIrC,UAAU,cACZ,yCACA,wBAAIA,UAAU,WAAW2B,GACzB,wCACA,wBAAI3B,UAAU,WAAW4B,GACzB,uCACA,wBAAI5B,UAAU,WAAWyB,GACzB,yCACA,wBAAIzB,UAAU,WAAW0B,IAE3B,oCACA,+BAAKK,GACL,2BAAG,4BAAQnC,QAAS,kBAAMsC,GAAgB,IAAOnC,KAAK,SAASC,UAAU,OAAOC,KAAK,SAAlF,kBACH,2BAAG,4BAAQL,QAASkC,EAAkB/B,KAAK,SAASC,UAAU,OAAOC,KAAK,SAAvE,gB,qBCjCM,SAASsC,IACtB,OACE,gCACE,yBAAKC,IAAKC,IAASC,IAAI,e,ICKRC,E,2MACnBC,iBAAmB,WACjB,MAAO,CACLrC,GAAI,KACJN,KAAM,KACN4C,MAAO,I,EAIXC,aAAe,WAAO,IAAD,EACnB,OAAO,EAAP,CACEC,KAAM,MADR,cAEGxD,EAAU,EAAKqD,oBAFlB,cAGGpD,EAAY,EAAKoD,oBAHpB,cAIGnD,EAAY,EAAKmD,oBAJpB,cAKGlD,EAAc,EAAKkD,oBALtB,sBAMS,MANT,uBAOU,MAPV,yBAQY,MARZ,8BASiB,MATjB,mCAUsB,MAVtB,oCAWuB,MAXvB,2BAYc,KAZd,G,EAgBFI,MAAQ,EAAKF,e,EAMbG,UAAY,WACV,EAAKD,MAAMD,KAAKG,KAAK,CAAEC,QAAS,e,EAGlCC,UAAY,WACV,EAAKJ,MAAMD,KAAKG,KAAK,CAAEC,QAAS,e,6EATV,IAAZE,EAAW,uDAAH,EAClBC,KAAKN,MAAMD,KAAKG,KAAK,CAAEC,QAASG,KAAKN,MAAM3C,OAAQgD,MAAOA,M,0CAWvC,IAAD,OACZE,EAAW,kBAAc,EAAKA,SAAL,QAAI,YAEpB,IAAIC,SPtDS,8COuDrBC,aAAa,0BAA0BC,KAAK,SAAAX,GACjDQ,EAAS,CAAER,SAGXA,EAAKC,MAAMW,MAAMC,SAAW,SAASC,EAAQC,GACvCD,EAAOE,WAAaD,GACtBP,EAAS,CAAElD,OAAQwD,EAAOtD,GAAIyD,SAAUH,EAAO5D,QAGnD8C,EAAKC,MAAMY,SAAW,SAACK,GACrB,IAAMC,EAAe,GACrBD,EAAQE,QAAQ,SAAAC,GACdF,EAAaE,EAAOC,OAASD,EAAOf,QAEtCE,EAASW,Q,iCAKH,IAAD,EACsDZ,KAAKN,MAGpE,OAJS,EACDsB,mBAC+B,GAF9B,EACmBC,oBADnB,EACwCC,YAGrCpC,QAAQ,K,kCAIpB,IAAMqC,EAAWnB,KAAKN,MAAMM,KAAKN,MAAM3C,QACvC,OAAKoE,EAEEA,EAAS5B,MAFM,O,mCAKV,IAAD,EAC2CS,KAAKN,MAAnDzD,EADG,EACHA,QAASC,EADN,EACMA,UAAWC,EADjB,EACiBA,SAAUC,EAD3B,EAC2BA,YACtC,OAAOH,EAAQsD,MAAQrD,EAAUqD,MAAQpD,EAASoD,MAAQnD,EAAYmD,Q,8BAGhExC,GACN,OAAOiD,KAAKN,MAAM3C,K,gCAGVA,GACR,OAA0B,IAAtBiD,KAAKoB,aAA2B,KAE5BpB,KAAKqB,QAAQtE,GAAQwC,MAAMS,KAAKoB,aAAa,KAAKtC,QAAQ,K,qCAGpD,IAAD,SACqEkB,KAAKN,MAA/E3C,EADK,EACLA,OAAQuE,EADH,EACGA,MAAOC,EADV,EACUA,cAAeP,EADzB,EACyBA,mBAAoBC,EAD7C,EAC6CA,oBAC1D,OAAIM,EAEA,kBAACrD,EAAD,CACEK,gBAAiB0C,EACjB7C,eAAgB4B,KAAKwB,UAAUpF,GAC/B+B,aAAc6B,KAAKwB,UAAUvF,GAC7BqC,cAAe0B,KAAKwB,UAAUrF,GAC9BkC,eAAgB2B,KAAKwB,UAAUtF,GAC/BuC,KAAMuB,KAAKyB,WACXrE,aAAckE,EACd9C,iBAAkBwB,KAAKF,YAKzB,kBAAChD,EAAD,CAAiBC,OAAQA,GACvB,gDAAsBuE,GACtB,sDAA4BtB,KAAKoB,aAAjC,UACA,gDAAsBJ,EAAtB,UAEA,kBAAC,EAAD,CAAMxE,OAAQ,SAACuD,GAAD,OAAW,EAAK2B,YAAY3B,S,+BAQhD,OACE,oCACE,kBAACd,EAAD,MACCe,KAAK2B,oB,GA7HoB/E,IAAMC,WCApB+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBlG,WACrBA,UAAUmG,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC,iB","file":"static/js/main.f4e850e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.654d467c.svg\";","export const LocalServer = \"ws://localhost:2567\"\nexport const ProductionServer = \"wss://feral-hog-distribution.herokuapp.com\"\n\nexport const booster = \"booster\"\nexport const navigator = \"navigator\"\nexport const wrangler = \"wrangler\"\nexport const lifeSupport = \"lifeSupport\"\n","import React from 'react'\n\nexport default class Boop extends React.Component {\n  render() {\n    return (\n      <p><button onClick={() => this.props.onBoop(1)} type=\"button\" className=\"text\" name=\"input\">Snoot</button></p>\n    )\n  }\n}","import React from 'react'\n\nimport { booster, wrangler, navigator, lifeSupport } from './Constants'\n\nexport default function RoleDescription({ roleId, children }) {\n\n  function content() {\n    switch (roleId) {\n      case booster:\n        return (\n          <>\n            <h2>You are the <strong>Booster</strong></h2>\n            <p>You crank the engine and keep the ship going at the correct speed.</p>\n            <p>Listen to the <strong>Navigator</strong> and keep the ship going at the correct speed.</p>\n            <p>Monitor the <strong>Boom-O-Meter</strong> and tell the <strong>Wrangler</strong> their target.</p>\n          </>\n        )\n      case wrangler:\n        return (\n          <>\n            <h2>You are the <strong>Wrangler</strong></h2>\n            <p>You boop the hogs and make sure the engines have enough fuel.</p>\n            <p>Listen to the <strong>Booster</strong> and keep milk at the forrect flow rate.</p>\n            <p>Monitor the <strong>Therm-O-Meter</strong> and tell the <strong>Habitator</strong> their target.</p>\n          </>\n        )\n      case navigator:\n        return (\n          <>\n            <h2>You are the <strong>Navigator</strong></h2>\n            <p>You drive the ship and keep it sailing in the right direction.</p>\n            <p>Listen to the <strong>Habitator</strong> and keep the ship on target.</p>\n            <p>Monitor the <strong>Warp-O-Meter</strong> and tell the <strong>Booster</strong> their target.</p>\n          </>\n        )\n      case lifeSupport:\n        return (\n          <>\n            <h2>You are the <strong>Habitator</strong></h2>\n            <p>You maintain the life support systems and keep the hogs at a healthy temperature</p>\n            <p>Listen to the <strong>Wrangler</strong> and keep the hogs at the correct temperature.</p>\n            <p>Monitor the <strong>Ray-O-Meter</strong> and tell the <strong>Navigator</strong> their energy production target.</p>\n          </>\n        )\n      default:\n        return null\n    }\n  }\n\n  return (\n    <main id=\"role_allocation\">\n      {content()}\n      {children}\n    </main>\n  )\n}","import React from 'react'\n\nexport default function Map({ currentStage }) {\n  return (\n    <svg data-current-stage={currentStage} viewBox=\"-20 -20 807 249\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M5,224.5 L122,78 L301.5,127 L262.5,203.5 L449.5,127 L301.5,47.5 L347,4 L427,78 L529.5,16.5 L598,179 L783,152\" stroke=\"#24B3E6\" strokeWidth=\"2\" strokeDasharray=\"8\" fill=\"none\"></path>\n      <circle data-stage=\"0\" cx=\"4\" cy=\"225\" r=\"4\"></circle>\n      <circle data-stage=\"1\" cx=\"122\" cy=\"78\" r=\"4\"></circle>\n      <circle data-stage=\"2\" cx=\"300\" cy=\"127\" r=\"4\"></circle>\n      <circle data-stage=\"3\" cx=\"262\" cy=\"206\" r=\"4\"></circle>\n      <circle data-stage=\"4\" cx=\"451\" cy=\"127\" r=\"4\"></circle>\n      <circle data-stage=\"5\" cx=\"300\" cy=\"47\" r=\"4\"></circle>\n      <circle data-stage=\"6\" cx=\"347\" cy=\"4\" r=\"4\"></circle>\n      <circle data-stage=\"7\" cx=\"427\" cy=\"78\" r=\"4\"></circle>\n      <circle data-stage=\"8\" cx=\"530\" cy=\"16\" r=\"4\"></circle>\n      <circle data-stage=\"9\" cx=\"598\" cy=\"179\" r=\"4\"></circle>\n      <circle data-stage=\"10\" cx=\"783\" cy=\"151\" r=\"4\"></circle>\n    </svg>\n  )\n}","import React from 'react'\n\nimport Map from './Assets/Map'\n\nexport default function ProcessScreen({ currentStage, children }) {\n  return (\n    <main id=\"screen_progress\" >\n      <Map currentStage={currentStage} />\n      {children}\n    </main>\n  )\n\n}","import React, { useState } from 'react'\nimport ProcessScreen from './ProgressScreen'\n\nexport default function ScoreScreen({ boosterScore, habitatorScore, navigatorScore, wranglerScore, secondsForRound, onNextRoundClick, cash, currentStage }) {\n  const [showProgress, setShowProgress] = useState(false)\n\n  const minutes = (secondsForRound / 60).toFixed(0)\n  let seconds = (secondsForRound % 60).toFixed(0)\n  if (seconds.length === 1) seconds = \"0\" + seconds\n\n  if (showProgress) {\n    return (\n      <ProcessScreen currentStage={currentStage}>\n        <p><button onClick={() => setShowProgress(false)} type=\"button\" className=\"text\" name=\"input\">Show Scores</button></p>\n      </ProcessScreen>\n    )\n  }\n\n  return (\n    <main id=\"screen_score\">\n      <dl className=\"list_score\">\n        <dt>Time</dt>\n        <dd>{minutes}:{seconds}</dd>\n      </dl>\n      <dl className=\"list_score\">\n        <dt>Navigator</dt>\n        <dd className=\"percent\">{navigatorScore}</dd>\n        <dt>Wrangler</dt>\n        <dd className=\"percent\">{wranglerScore}</dd>\n        <dt>Booster</dt>\n        <dd className=\"percent\">{boosterScore}</dd>\n        <dt>Habitator</dt>\n        <dd className=\"percent\">{habitatorScore}</dd>\n      </dl>\n      <h2>CASH</h2>\n      <p>${cash}</p>\n      <p><button onClick={() => setShowProgress(true)} type=\"button\" className=\"text\" name=\"input\">Show Progress</button></p>\n      <p><button onClick={onNextRoundClick} type=\"button\" className=\"text\" name=\"input\">Next round</button></p>\n    </main>\n  )\n}\n","import React from 'react'\n\nimport LogoSvg from './Assets/logo.svg'\n\nexport default function Header() {\n  return (\n    <header>\n      <img src={LogoSvg} alt=\"Game logo\" />\n    </header>\n  )\n}","import * as Colyseus from \"colyseus.js\";\n\nimport React from 'react'\nimport './Game.scss'\n\nimport { LocalServer, ProductionServer, lifeSupport, navigator, wrangler, booster } from \"../Constants\"\n\nimport Boop from '../Boop/Boop'\nimport RoleDescription from \"../RoleDescription\";\nimport ScoreScreen from \"../ScoreScreen\";\nimport Header from \"../Header\";\n\nexport default class Game extends React.Component {\n  defaultRoleShape = () => {\n    return {\n      id: null,\n      name: null,\n      boops: 0,\n    }\n  }\n\n  defaultState = () => {\n    return {\n      room: null,\n      [booster]: this.defaultRoleShape(),\n      [navigator]: this.defaultRoleShape(),\n      [wrangler]:  this.defaultRoleShape(),\n      [lifeSupport]: this.defaultRoleShape(),\n      stage: null,\n      roleId: null,\n      roleName: null,\n      betweenRounds: null,\n      totalBoopsRequired: null,\n      secondsForLastRound: null,\n      multiplier: 100\n    }\n  }\n\n  state = this.defaultState()\n\n  updateBoops(value = 1) {\n    this.state.room.send({ command: this.state.roleId, value: value });\n  }\n\n  resetGame = () => {\n    this.state.room.send({ command: \"resetGame\" })\n  }\n\n  nextRound = () => {\n    this.state.room.send({ command: \"nextRound\" })\n  }\n\n  componentDidMount() {\n    const setState = (...state) => this.setState(...state)\n\n    const client = new Colyseus.Client(process.env.NODE_ENV === \"production\" ? ProductionServer : LocalServer);\n    client.joinOrCreate(\"feral-hog-distribution\").then(room => {\n      setState({ room })\n\n      // set player role and name\n      room.state.zones.onChange = function(update, sessionId) {\n        if (update.clientId === sessionId)\n          setState({ roleId: update.id, roleName: update.name })\n      }\n\n      room.state.onChange = (changes) => {\n        const stateChanges = {}\n        changes.forEach(change => {\n          stateChanges[change.field] = change.value\n        });\n        setState(stateChanges)\n      }\n    })\n  }\n\n  calcCash() {\n    const { totalBoopsRequired, secondsForLastRound, multiplier} = this.state\n    const targetSpeed = totalBoopsRequired/40\n    const cash = targetSpeed/secondsForLastRound*multiplier\n    return cash.toFixed(0)\n  }\n\n  yourBoops() {\n    const yourRole = this.state[this.state.roleId]\n    if (!yourRole) return null\n\n    return yourRole.boops\n  }\n\n  totalBoops() {\n    const { booster, navigator, wrangler, lifeSupport } = this.state\n    return booster.boops + navigator.boops + wrangler.boops + lifeSupport.boops\n  }\n\n  getRole(roleId) {\n    return this.state[roleId]\n  }\n\n  yourScore(roleId) {\n    if (this.totalBoops() === 0) return \"0\"\n\n    return (this.getRole(roleId).boops/this.totalBoops()*100).toFixed(0)\n  }\n\n  renderScreen() {\n    const { roleId, stage, betweenRounds, totalBoopsRequired, secondsForLastRound } = this.state\n    if (betweenRounds) {\n      return (\n        <ScoreScreen\n          secondsForRound={secondsForLastRound}\n          habitatorScore={this.yourScore(lifeSupport)}\n          boosterScore={this.yourScore(booster)}\n          wranglerScore={this.yourScore(wrangler)}\n          navigatorScore={this.yourScore(navigator)}\n          cash={this.calcCash()}\n          currentStage={stage}\n          onNextRoundClick={this.nextRound}\n        />\n      )\n    } else {\n      return (\n        <RoleDescription roleId={roleId} >\n          <p>You are on stage: {stage}</p>\n          <p>Your team has performed {this.totalBoops()} boops</p>\n          <p>You want to reach {totalBoopsRequired} boops</p>\n          {/* <p>You have {this.yourBoops()} boops</p> */}\n          <Boop onBoop={(value) => this.updateBoops(value)} />\n        </RoleDescription>\n      )\n    }\n  }\n\n  // Role select?\n  render() {\n    return (\n      <>\n        <Header />\n        {this.renderScreen()}\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/client.scss';\nimport Game from './Game/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}