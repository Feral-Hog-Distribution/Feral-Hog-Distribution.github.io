{"version":3,"sources":["Constants.js","Boop/Boop.js","RoleDescription.js","ScoreScreen.js","Game/Game.js","serviceWorker.js","index.js"],"names":["booster","navigator","wrangler","lifeSupport","Boop","onClick","props","onBoop","React","Component","RoleDescription","roleId","children","id","content","ScoreScreen","boosterScore","habitatorScore","navigatorScore","wranglerScore","onNextRoundClick","class","Game","defaultRoleShape","name","boops","defaultState","room","state","resetGame","send","command","nextRound","value","this","setState","Colyseus","joinOrCreate","then","zones","onChange","update","sessionId","clientId","roleName","changes","stateChanges","forEach","change","field","yourRole","stage","betweenRounds","totalBoopsRequired","totalBoops","updateBoops","renderScreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d36de50.chunk.js","sourcesContent":["export const LocalServer = \"ws://localhost:2567\"\nexport const ProductionServer = \"wss://feral-hog-distribution.herokuapp.com\"\n\nexport const booster = \"booster\"\nexport const navigator = \"navigator\"\nexport const wrangler = \"wrangler\"\nexport const lifeSupport = \"lifeSupport\"\n","import React from 'react'\n\nexport default class Boop extends React.Component {\n  render() {\n    return (\n      <button onClick={() => this.props.onBoop(1)}>Snoot</button>\n    )\n  }\n}","import React from 'react'\n\nimport { booster, wrangler, navigator, lifeSupport } from './Constants'\n\nexport default function RoleDescription({ roleId, children }) {\n\n  function content() {\n    switch (roleId) {\n      case booster:\n        return (\n          <>\n            <h2>You are the <strong>Booster</strong></h2>\n            <p>You crank the engine and keep the ship going at the correct speed.</p>\n            <p>Listen to the <strong>Navigator</strong> and keep the ship going at the correct speed.</p>\n            <p>Monitor the <strong>Boom-O-Meter</strong> and tell the <strong>Wrangler</strong> their target.</p>\n          </>\n        )\n      case wrangler:\n        return (\n          <>\n            <h2>You are the <strong>Wrangler</strong></h2>\n            <p>You boop the hogs and make sure the engines have enough fuel.</p>\n            <p>Listen to the <strong>Booster</strong> and keep milk at the forrect flow rate.</p>\n            <p>Monitor the <strong>Therm-O-Meter</strong> and tell the <strong>Habitator</strong> their target.</p>\n          </>\n        )\n      case navigator:\n        return (\n          <>\n            <h2>You are the <strong>Navigator</strong></h2>\n            <p>You drive the ship and keep it sailing in the right direction.</p>\n            <p>Listen to the <strong>Habitator</strong> and keep the ship on target.</p>\n            <p>Monitor the <strong>Warp-O-Meter</strong> and tell the <strong>Booster</strong> their target.</p>\n          </>\n        )\n      case lifeSupport:\n        return (\n          <>\n            <h2>You are the <strong>Habitator</strong></h2>\n            <p>You maintain the life support systems and keep the hogs at a healthy temperature</p>\n            <p>Listen to the <strong>Wrangler</strong> and keep the hogs at the correct temperature.</p>\n            <p>Monitor the <strong>Ray-O-Meter</strong> and tell the <strong>Navigator</strong> their energy production target.</p>\n          </>\n        )\n      default:\n        return null\n    }\n  }\n\n  return (\n    <main id=\"role_allocation\">\n      {content()}\n      {children}\n    </main>\n  )\n}","import React from 'react'\n\nexport default function ScoreScreen({ boosterScore, habitatorScore, navigatorScore, wranglerScore, onNextRoundClick }) {\n  return (\n    <main id=\"screen_score\">\n      <dl class=\"list_score\">\n        <dt>Time</dt>\n        <dd>1:33</dd>\n      </dl>\n      <dl class=\"list_score\">\n        <dt>Navigator</dt>\n        <dd class=\"percent\">{navigatorScore}</dd>\n        <dt>Wrangler</dt>\n        <dd class=\"percent\">{wranglerScore}</dd>\n        <dt>Booster</dt>\n        <dd class=\"percent\">{boosterScore}</dd>\n        <dt>Habitator</dt>\n        <dd class=\"percent\">{habitatorScore}</dd>\n      </dl>\n      <h2>CASH</h2>\n      <p>$165,987,000</p>\n      <button onClick={onNextRoundClick}>Next round!!!!</button>\n    </main>\n  )\n}","import * as Colyseus from \"colyseus.js\";\n\nimport React from 'react'\nimport './Game.scss'\n\nimport { LocalServer, ProductionServer, lifeSupport, navigator, wrangler, booster } from \"../Constants\"\n\nimport Boop from '../Boop/Boop'\nimport RoleDescription from \"../RoleDescription\";\nimport ScoreScreen from \"../ScoreScreen\";\n\nexport default class Game extends React.Component {\n  defaultRoleShape = () => {\n    return {\n      id: null,\n      name: null,\n      boops: 0,\n    }\n  }\n\n  defaultState = () => {\n    return {\n      room: null,\n      [booster]: this.defaultRoleShape(),\n      [navigator]: this.defaultRoleShape(),\n      [wrangler]:  this.defaultRoleShape(),\n      [lifeSupport]: this.defaultRoleShape(),\n      stage: null,\n      roleId: null,\n      roleName: null,\n      betweenRounds: null,\n      totalBoopsRequired: null,\n    }\n  }\n\n  state = this.defaultState()\n\n  updateBoops(value = 1) {\n    this.state.room.send({ command: this.state.roleId, value: value });\n  }\n\n  resetGame = () => {\n    this.state.room.send({ command: \"resetGame\" })\n  }\n\n  nextRound = () => {\n    this.state.room.send({ command: \"nextRound\" })\n  }\n\n  componentDidMount() {\n    const setState = (...state) => this.setState(...state)\n\n    const client = new Colyseus.Client(process.env.NODE_ENV === \"production\" ? ProductionServer : LocalServer); \n    client.joinOrCreate(\"feral-hog-distribution\").then(room => {\n      setState({ room })\n\n      // set player role and name\n      room.state.zones.onChange = function(update, sessionId) {\n        if (update.clientId === sessionId)\n          setState({ roleId: update.id, roleName: update.name })\n      }\n\n      room.state.onChange = (changes) => {\n        const stateChanges = {}\n        changes.forEach(change => {\n          stateChanges[change.field] = change.value\n        });\n        setState(stateChanges)\n      }\n    })\n  }\n\n  yourBoops() {\n    const yourRole = this.state[this.state.roleId]\n    if (!yourRole) return null\n\n    return yourRole.boops\n  }\n\n  totalBoops() {\n    const { booster, navigator, wrangler, lifeSupport } = this.state\n    return booster.boops + navigator.boops + wrangler.boops + lifeSupport.boops\n  }\n\n  renderScreen() {\n    const { roleId, stage, betweenRounds, totalBoopsRequired, booster, wrangler, navigator, lifeSupport } = this.state\n    if (betweenRounds) {\n      return (\n        <ScoreScreen \n          habitatorScore={lifeSupport.boops}\n          boosterScore={booster.boops}\n          wranglerScore={wrangler.boops}\n          navigatorScore={navigator.boops}\n          onNextRoundClick={this.nextRound}\n        />\n      )\n    } else {\n      return (\n        <RoleDescription roleId={roleId} >\n          <p>You are on stage: {stage}</p>\n          <p>Your team has performed {this.totalBoops()} boops</p>\n          <p>You want to reach {totalBoopsRequired} boops</p>\n          {/* <p>You have {this.yourBoops()} boops</p> */}\n          <Boop onBoop={(value) => this.updateBoops(value)} />\n        </RoleDescription>\n      )\n    }\n  }\n\n  // Role select?\n  render() {\n    return (\n      <>\n        {this.renderScreen()}\n      </>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/client.scss';\nimport Game from './Game/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}