{"version":3,"sources":["Helpers.js","Boop/Boop.js","Game/Game.js","Constants.js","serviceWorker.js","index.js"],"names":["findHealthForRole","updates","fieldName","update","find","field","value","health","findValue","Boop","onClick","props","onBoop","React","Component","booster","navigator","wrangler","lifeSupport","Game","defaultState","room","state","resetGame","send","command","role","this","setState","roleId","Colyseus","joinOrCreate","then","zones","onChange","sessionId","clientId","id","roleName","name","stage","won","yourHealth","updateHealthOf","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"wVAMO,SAASA,EAAkBC,EAASC,GACzC,IAAMC,EAAUF,EAAQG,KAAK,SAASD,GAAU,OAAOA,EAAOE,QAAUH,IACxE,OAAKC,EAEEA,EAAOG,MAAMC,OAFA,KAKf,SAASC,EAAUP,EAASC,GACjC,IAAMC,EAAUF,EAAQG,KAAK,SAASD,GAAU,OAAOA,EAAOE,QAAUH,IACxE,OAAKC,EAEEA,EAAOG,MAFM,K,ICbDG,E,iLACT,IAAD,OACP,OACE,4BAAQC,QAAS,kBAAM,EAAKC,MAAMC,OAAO,KAAzC,a,GAH4BC,IAAMC,WCQlCC,EAAU,UACVC,EAAY,YACZC,EAAW,WACXC,EAAc,cAGCC,E,2MACnBC,aAAe,WAAO,IAAD,EACnB,OAAO,EAAP,CACEC,KAAM,MADR,cAEGN,EAAU,MAFb,cAGGC,EAAY,MAHf,cAIGC,EAAW,MAJd,cAKGC,EAAc,MALjB,sBAMS,MANT,qBAOQ,MAPR,yBAQY,MARZ,G,EAYFI,MAAQ,EAAKF,e,EAUbG,UAAY,WACV,EAAKD,MAAMD,KAAKG,KAAK,CAAEC,QAAS,e,2EATtBC,EAAMpB,GAChBqB,KAAKC,SAAL,eAAiBF,EAAOpB,M,qCAGXuB,EAAQvB,GACrBqB,KAAKL,MAAMD,KAAKG,KAAK,CAAEC,QAASI,EAAQvB,MAAOA,M,0CAO5B,IAAD,OACZsB,EAAW,kBAAc,EAAKA,SAAL,QAAI,YAEpB,IAAIE,SC9CS,8CD+CrBC,aAAa,0BAA0BC,KAAK,SAAAX,GACjDO,EAAS,CAAEP,SAGXA,EAAKC,MAAMW,MAAMC,SAAW,SAAS/B,EAAQgC,GACvChC,EAAOiC,WAAaD,GAAWP,EAAS,CAAEF,KAAMvB,EAAOkC,GAAIC,SAAUnC,EAAOoC,QAGlFlB,EAAKC,MAAMY,SAAW,SAACjC,GACc,MAA/BO,EAAUP,EAAS,UAAkB2B,EAAS,CAAEY,MAAOhC,EAAUP,EAAS,WAC3C,MAA/BO,EAAUP,EAASc,IAAkBa,EAAS,eAAGb,EAAUf,EAAkBC,EAASc,KACrD,MAAjCP,EAAUP,EAASe,IAAoBY,EAAS,eAAGZ,EAAYhB,EAAkBC,EAASe,KAC1D,MAAhCR,EAAUP,EAASgB,IAAmBW,EAAS,eAAGX,EAAWjB,EAAkBC,EAASgB,KACrD,MAAnCT,EAAUP,EAASiB,IAAsBU,EAAS,eAAGV,EAAclB,EAAkBC,EAASiB,U,mCAMtG,OAAOS,KAAKL,MAAMK,KAAKL,MAAMI,Q,+BAIrB,IAAD,SAC2BC,KAAKL,MAA/BI,EADD,EACCA,KAAMY,EADP,EACOA,SAAUE,EADjB,EACiBA,MAClBC,EAAMD,EAAQ,EACpB,OACE,yBAAKH,GAAG,SAEHI,GAAO,oCACN,gDAAsBD,GACtB,uCAAaF,GACb,wCAAcX,KAAKe,aAAnB,UACA,kBAAC,EAAD,CAAM9B,OAAQ,SAACN,GAAD,OAAW,EAAKqC,eAAejB,EAAMpB,OAIrDmC,GAAO,oCACP,wCACA,4BAAQ/B,QAASiB,KAAKJ,WAAtB,e,GAvEwBV,IAAMC,WEJpB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBpC,WACrBA,UAAUqC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.bd3494ed.chunk.js","sourcesContent":["export function updateHealthWithValue(updates, updateFunction) {\n  var updatedHealth = updates.find(function(update) { return update.field === \"health\" })\n  if (!updatedHealth) return\n  return updateFunction(updatedHealth.value)\n}\n\nexport function findHealthForRole(updates, fieldName) {\n  const update =  updates.find(function(update) { return update.field === fieldName })\n  if (!update) return null\n\n  return update.value.health\n}\n\nexport function findValue(updates, fieldName) {\n  const update =  updates.find(function(update) { return update.field === fieldName })\n  if (!update) return null\n\n  return update.value\n}\n","import React from 'react'\n\nexport default class Boop extends React.Component {\n  render() {\n    return (\n      <button onClick={() => this.props.onBoop(1)}>Snoot</button>\n    )\n  }\n}","import * as Colyseus from \"colyseus.js\";\n\nimport React from 'react'\nimport './Game.scss'\n\nimport { LocalServer, ProductionServer } from \"../Constants\"\nimport { findValue, findHealthForRole } from '../Helpers'\n\nimport Boop from '../Boop/Boop'\n\nconst booster = \"booster\"\nconst navigator = \"navigator\"\nconst wrangler = \"wrangler\"\nconst lifeSupport = \"lifeSupport\"\n\n\nexport default class Game extends React.Component {\n  defaultState = () => {\n    return {\n      room: null,\n      [booster]: null,\n      [navigator]: null,\n      [wrangler]: null,\n      [lifeSupport]: null,\n      stage: null,\n      role: null,\n      roleName: null,\n    }\n  }\n\n  state = this.defaultState()\n\n  setHealthOf(role, value) {\n    this.setState({ [role]: value })\n  }\n\n  updateHealthOf(roleId, value) {\n    this.state.room.send({ command: roleId, value: value });\n  }\n\n  resetGame = () => {\n    this.state.room.send({ command: \"resetGame\" })\n  }\n\n  componentDidMount() {\n    const setState = (...state) => this.setState(...state)\n\n    const client = new Colyseus.Client(process.env.NODE_ENV === \"production\" ? ProductionServer : LocalServer); \n    client.joinOrCreate(\"feral-hog-distribution\").then(room => {\n      setState({ room })\n\n      // set player role and name\n      room.state.zones.onChange = function(update, sessionId) {\n        if (update.clientId === sessionId) setState({ role: update.id, roleName: update.name })\n      }\n\n      room.state.onChange = (updates) => {\n        if (findValue(updates, \"stage\") != null) setState({ stage: findValue(updates, \"stage\") })\n        if (findValue(updates, booster) != null) setState({ [booster]: findHealthForRole(updates, booster) })\n        if (findValue(updates, navigator) != null) setState({ [navigator]: findHealthForRole(updates, navigator) })\n        if (findValue(updates, wrangler) != null) setState({ [wrangler]: findHealthForRole(updates, wrangler) })\n        if (findValue(updates, lifeSupport) != null) setState({ [lifeSupport]: findHealthForRole(updates, lifeSupport) })\n      }\n    })\n  }\n\n  yourHealth() {\n    return this.state[this.state.role]\n  }\n\n  // Role select?\n  render() {\n    const { role, roleName, stage } = this.state\n    const won = stage > 0\n    return (\n      <div id=\"game\">\n        { \n          !won && <>\n            <p>You are on stage: {stage}</p>\n            <p>You are: {roleName}</p>\n            <p>Your have {this.yourHealth()} boops</p>\n            <Boop onBoop={(value) => this.updateHealthOf(role, value)} />\n          </>\n        }\n        {\n          won && <>\n          <h1>YOU WIN!</h1>\n          <button onClick={this.resetGame}>Reset</button>\n          </>\n        }\n      </div>\n    )\n  }\n}","export const LocalServer = \"ws://localhost:2567\"\nexport const ProductionServer = \"wss://feral-hog-distribution.herokuapp.com\"","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/client.scss';\nimport Game from './Game/Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}